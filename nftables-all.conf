#!/usr/sbin/nft -f

# Reset all existing rules to prevent conflicts (save the current rules if you need them)
flush ruleset

# CHANGE THIS VALUE! Define the interface for external connections to this server
define interface_wan = eth0
# CHANGE THIS VALUE! Define the external IPv4 of this server
define ipv4_wan = 127.0.0.1
# CHANGE THIS VALUE! Define the external IPv6 of this server
# define ipv6_wan = ::1
# CHANGE THIS VALUE! Defining a list of WireGuard IPv4 virtual network peers
define wg0_peers_ipv4 = { 10.0.0.1, 10.0.0.2, 10.0.0.0/24 }
# CHANGE THIS VALUE! Defining a list of WireGuard IPv6 virtual network peers
# define wg0_peers_ipv6 = { fdaa:abcd:dcba:aadf::1, fdaa:abcd:dcba:aadf::2, fdaa:abcd:dcba:aadf::0/64 }
# Define the Cloudflare addresses from which web traffic is allowed (updated 12/25/2022)
# define cloudflare_ips = { 173.245.48.0/20, 103.21.244.0/22, 103.22.200.0/22, 103.31.4.0/22, 141.101.64.0/18, 108.162.192.0/18, 190.93.240.0/20, 188.114.96.0/20, 197.234.240.0/22, 198.41.128.0/17, 162.158.0.0/15, 104.16.0.0/13, 104.24.0.0/14, 172.64.0.0/13, 131.0.72.0/22 }

# Create a routing table called "global" to handle IPv4 and IPv6
table inet global {

	# Create a conditional black hole to collect temporarily blocked attacking IP addresses. Not relevant if you use a proxy from Cloudflare
	set blackhole {
		type ipv4_addr;
		flags dynamic, timeout;
		size 65536;
	}

	# Create a port forwarding rule from under NAT if the destination peer in WireGuard does not have a dedicated IP and if it is necessary
#	map port_forwarding_ipv4 {
#		type ipv4_addr . inet_service : ipv4_addr . inet_service
#		# Redirect port 12345 from the external IPv4 to port 12345 at 10.0.0.2/24 in the WireGuard virtual network
#		elements = { $ipv4_wan . 12345 : 10.0.0.2/24 . 12345 }
#	}

	# Create a port forwarding rule from under NAT if the destination peer in WireGuard does not have a dedicated IP and if it is necessary
#	map port_forwarding_ipv6 {
#		type ipv6_addr . inet_service : ipv6_addr . inet_service
#		# Redirect port 12345 from external IPv6 to port 12345 at fdaa:abcd:dcba:aadf::2/64 in the WireGuard virtual network
#		elements = { $ipv6_wan . 12345 : fdaa:abcd:dcba:aadf::2/64 . 12345 }
#	}

	# Create a routing chain for external INbound connections
	chain input_wan {
		# Allow web traffic only from Cloudflare IP addresses. Not relevant if you have not set up a Cloudflare proxy
#		ip saddr $cloudflare_ips tcp dport { 80, 443 } accept comment "Accept HTTP, HTTPS"
		# Allow web traffic with control of the number of connection attempts, addresses exceeding the number of connections go into a black hole. Not relevant if you use a proxy from Cloudflare
		ct state new tcp dport { 80, 443 } meter flood size 128000 { ip saddr timeout 10s limit rate over 3/second } add @blackhole { ip saddr timeout 1m }
		ip saddr @blackhole drop

		# Allow traffic from external connections to WireGuard
		# Use the first rule to set a speed limit for INbound server traffic
#		udp dport 51820 limit rate 5 mbytes/second accept
		udp dport 51820 accept

		# Allow traffic for the Minecraft server
		# Set limits to control the number of connection attempts. Connections from an address that exceeds the number of possible connections are dropped
		tcp dport 25565 limit rate over { 15/minute, 3/second } drop
		# Set limits to control the speed of an INbound connection. Connections from an address that exceeds the limit are dropped
		tcp dport 25565 limit rate 1 mbytes/second drop
	}

	# Create a routing chain for the WireGuard virtual network
	chain input_vpn_wg0 {
		# Allow traffic for internal connections to WireGuard
		iifname wg0 accept
	}

	# Create a primary routing chain for external INbound connections
	chain input {
		# By default, we drop all traffic that does not fit any of the rules
		type filter hook input priority filter; policy drop;

		# Allow traffic for successfully established connections, drop invalid ones
		ct state vmap { established : accept, related : accept, invalid : drop }

		# Dropping spoofed local traffic from external connections
		iif != lo ip daddr 127.0.0.1/8 drop
		iif != lo ip6 daddr ::1/128 drop

		# Dropping spoofed traffic from reserved or private addresses from external connections
		# BE CAREFUL WHEN ACTIVATING THIS RULE
		# iifname $interface_wan ip saddr { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16 } drop

		# Dropping suspicious traffic from the reserved port list from external connections
		# BE CAREFUL WHEN ACTIVATING THIS RULE
		# iifname $interface_wan tcp sport 0-1023 drop

		# Allow pings of different types with control over the number of requests, pings in excess will be dropped
		meta l4proto icmp icmp type { destination-unreachable, router-solicitation, router-advertisement, time-exceeded, parameter-problem } accept limit rate over 5/second drop
		meta l4proto ipv6-icmp icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, mld-listener-query, mld-listener-report, mld-listener-reduction, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener-report } accept limit rate over 5/second drop

		# Allow dnat (necessary for port forwarding)
#		ct status dnat accept

		# Allow local traffic, everything else is handled by the relevant chains
		iifname vmap { lo : accept, $interface_wan : jump input_wan, wg0 : jump input_vpn_wg0 }

		# Traffic that does not match any rule is processed by the default policy (dropping)
	}

	# Create a routing chain for forwarding, necessary for the WireGuard server
	chain forward {
		# By default, we drop all traffic that does not fit any of the rules
		type filter hook forward priority filter; policy drop;

		# Allow traffic for successfully established connections, drop invalid ones
		ct state vmap { established : accept, related : accept, invalid : drop }
		# Allow port forwarding
#		ct status dnat accept

		# Allow the WireGuard peers in the list to communicate with each other
		iifname wg0 oifname wg0 ip daddr $wg0_peers_ipv4 ct state new accept
		iifname wg0 oifname wg0 ip6 daddr $wg0_peers_ipv6 ct state new accept
		# Allow forwarding from the WireGuard virtual network to the primary network interface
#		iifname wg0 oifname $interface_wan accept

		# Traffic that does not match any rule is processed by the default policy (dropping)
	}

	# Create a routing chain for prerouting
	chain prerouting {
		type nat hook prerouting priority dstnat; policy accept;
		# Create port forwarding rules according to the rules specified at the top of table
#		dnat ip addr . port to ip daddr . tcp dport map @port_forwarding_ipv4
#		dnat ip6 addr . port to ip6 daddr . tcp dport map @port_forwarding_ipv6
	}

	# Create a routing chain for postrouting
	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept;
		# Mask the IP of peer from wg0 to the external IP address of the server to access the Internet
#		iifname wg0 oifname $interface_wan snat ip to $ipv4_wan
		# OR
#		iifname wg0 oifname $interface_wan snat ip6 to $ipv6_wan
	}
}
